#!/usr/bin/env bash
# ------------------------------------------------------------------------------
# .bashrc (minimal)
# ------------------------------------------------------------------------------
# PROMPT_COMMAND='PS1="$(bash-prompt)"'

# ------------------------------------------------------------------------------
# .bashrc (with timestamp and retval)
# ------------------------------------------------------------------------------
# PROMPT_COMMAND='PS1="$(RETVAL=$? bash-prompt)"'
# export start_ms
# function preexec() {
# 	[[ -n "$COMP_LINE" ]] && return
# 	[[ "$BASH_COMMAND" == "$PROMPT_COMMAND" ]] && return
# 	printf "\x1b[38;5;8m[$(date +%T)] Started\e[0m\n"
# 	start_ms="$(date +'%s%3N')"
# }
# trap 'preexec' DEBUG

# ------------------------------------------------------------------------------
# fish.config
# ------------------------------------------------------------------------------
# function preexec_prompt --on-event fish_preexec
# 	printf "\x1b[38;5;8m["(date +%T)"] Started\e[0m\n"
# 	set -x start_ms (date +'%s%3N')
# end
# function fish_prompt
# 	bash-prompt
# end

current_ms="$(date +'%s%3N')"

parent="$(cat /proc/$PPID/comm 2>/dev/null)"

if [[ "$parent" == bash ]]; then
	reset="\[\e[0m\]"
	red='\[\e[1;31m\]'
	green='\[\e[1;32m\]'
	yellow='\[\e[1;93m\]'
	blue='\[\e[1;34m\]'
	magenta='\[\e[1;35m\]'
	cyan='\[\e[1;36m\]'
	white='\[\e[1;37m\]'

	red_bg='\[\e[41m\]'
	green_bg='\[\e[42m\]'
	yellow_bg='\[\e[43m\]'
	blue_bg='\[\e[44m\]'
	magenta_bg='\[\e[45m\]'
	cyan_bg='\[\e[46m\]'
	white_bg='\[\e[47m\]'
else
	reset="\e[0m"
	red='\e[1;31m'
	green='\e[1;32m'
	yellow='\e[1;93m'
	blue='\e[1;34m'
	magenta='\e[1;35m'
	cyan='\e[1;36m'
	white='\e[1;37m'

	red_bg='\e[41m'
	green_bg='\e[42m'
	yellow_bg='\e[43m'
	blue_bg='\e[44m'
	magenta_bg='\e[45m'
	cyan_bg='\e[46m'
	white_bg='\e[47m'
fi

# Print failing exit code of last command
((RETVAL)) && printf "\e[31m(exited $RETVAL)\e[0m\n"

# Get execution time
((start_ms)) && bash-prompt-time "$start_ms" "$current_ms"

# Prompt
prompt=''


# ==============================================================================
# USERNAME
# ==============================================================================
#prompt+="$blue\u"
prompt+="${blue}todd"


# ==============================================================================
# HOST
# ==============================================================================
if [[ ! -e ${TMUX%%,*} ]]; then
	[[ -n $LSB_BATCH_JID ]] && lsf=1 || lsf=0
	[[ $lsf == 1 ]] && prompt+=":$yellow$LSB_BATCH_JID$blue" || prompt+="@\h"
fi


# ==============================================================================
# DIRECTORY
# ==============================================================================
#dir=${PWD%/*/*}
#dir2=${PWD#$dir/}

# Directory permissions
[[ "$OSTYPE" =~ .*darwin.* ]] && ismac=1 || ismac=0
((ismac)) && permission="$(stat -f %Lp .)" || permission="$(stat -c %a .)"
bad_dir=$?
if ((bad_dir)); then
	prompt+=" ${red}???"

else
	p1="${permission:(-3):1}"
	p2="${permission:(-2):1}"
	p3="${permission:(-1):1}"
	prompt+=" "
	if ((ismac)); then
		owner="$(stat -f %Su .)"
		group="$(stat -f %Sg .)"
	else
		owner="$(stat -c %U .)"
		group="$(stat -c %G .)" 
	fi

	[[ "$(whoami)" == "$owner" ]] && prompt+="$green$p1" || prompt+="$red$p1"
	groups | grep -q "$group" && prompt+="$green$p2" || prompt+="$red$p2"
	prompt+="$green$p3"

	# Check PWD for user
	base="$(basename "$(pwd)")"
	#base='\W'
	pwd | grep -q $(whoami) && prompt+=" $green$base" || prompt+=" $yellow$base"
fi


# ==============================================================================
# GIT
# ==============================================================================
in_git="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
RETVAL=$?
#git_slow=1

if ((RETVAL)); then
	if git safe-top &>/dev/null; then
		prompt+=" ${red}<unsafe>"
	fi
else

	#git_url="$(git config --get remote.origin.url 2>/dev/null)"
	git_branch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)"

	# TODO: Add timeout here
	# https://unix.stackexchange.com/questions/43340/how-to-introduce-timeout-for-shell-scripting
	#stat="$(git status -sb -uno 2>/dev/null | head -1)"
	#git_slow=$?
	
	[[ -f "$(git rev-parse --show-toplevel 2>/dev/null)/.git/index.lock" ]] && prompt+=" ${red}<locked>"
	#[[ -f "$(git rev-parse --show-toplevel 2>/dev/null)/.git/index.lock" ]] && prompt+=" ðŸ”’"

	if ((git_slow)); then
		prompt+=" $white$git_branch"

	else

		# Check if in .git directory
		if [[ "$in_git" == 'false' ]]; then
			git_branch=".git"
			prompt+="$red"
		elif ! (git rev-parse @{u} &>/dev/null); then
			prompt+="$cyan"
		#elif ! (git diff-index --quiet HEAD 2>/dev/null); then
		elif ! (git diff-index --quiet --exit-code --ignore-submodules HEAD); then
			prompt+="$red"
		else
			prompt+="$green"
		fi
		#prompt+="$white$git_branch$reset"
		prompt+=" $git_branch"

		# TODO: Get ahead/behind
		stat="$(git status -sb -uno 2>/dev/null | head -1)"
		case "$OSTYPE" in
			darwin*)
				ahead="$( echo "$stat" | sed -n -E 's/.*ahead ([0-9]+).*/ +\1/p')"
				behind="$(echo "$stat" | sed -n -E 's/.*behind ([0-9]+).*/ -\1/p')"
			;;
			*)
				ahead="$( echo "$stat" | sed -n 's/.*ahead \([0-9]\+\).*/ +\1/p')"
				behind="$(echo "$stat" | sed -n 's/.*behind \([0-9]\+\).*/ -\1/p')"
			;;
		esac
		prompt+="$yellow$ahead"
		prompt+="$red$behind"
	fi
fi


# ==============================================================================
# END
# ==============================================================================
# Check last command
#if [[ -n "$RETVAL" ]]; then
	#[[ $RETVAL == 0 ]] && prompt+=" $green:)" || prompt+=" $red:("
#fi
if [[ "$parent" == bash ]]; then
	prompt+=" $blue"
else
	prompt+=" $green"
fi

#prompt_char='$'
prompt_char='Â»'
#prompt_char='â‰«'
#prompt_char='âª¢'
#prompt_char='â–¶'
#prompt+="$prompt_char$reset "
#prompt+="$prompt_char$reset "
prompt+="$prompt_char$reset "

printf "$prompt"

